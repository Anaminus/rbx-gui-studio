--[[Status
Displays the current status of the program.

Messages added to the Status are added to a stack. The message on the top of the stack is displayed.
Messages consist of multiple strings, which are ordered using a numerical index.

API:
	Status.StatusFrame              The GUI that displays the status message.
	Status:Add(ref)                 Adds a new Message to the top of the stack.
	Status:Remove(ref)              Removes the Message referenced by `ref`.
	Status[ref]                     Returns the Message referenced by `ref`.

	Message:GetString()             Returns the string generated by this message.
	Message[index] = string         Sets a part of the message.
	Message[index]                  Returns a part of the message.
]]

do
	local StatusFrame = Create'TextLabel'{
		Name = "Status Label";
		BackgroundTransparency = 1;
		Text = "";
		TextColor3 = InternalSettings.GuiColor.Text;
		FontSize = 'Size10';
		TextWrapped = true;
		TextXAlignment = 'Left';
		TextYAlignment = 'Center';
	}

	local MessageLookup = {}
	local MessageStack = {}

	Status = {
		StatusFrame = StatusFrame;
	}

	local function updateDisplay()
		if #MessageStack > 0 then
			StatusFrame.Text = MessageLookup[MessageStack[#MessageStack]]:GetString()
		else
			StatusFrame.Text = ""
		end
	end

	local function createMessage()
		local messageSet = {}
		return setmetatable({
				Destroy = function(self)
					setmetatable(self,nil)
				end;
				GetString = function()
					local sorted = {}
					for i,v in pairs(messageSet) do
						if type(i) == 'number' then
							sorted[#sorted+1] = i
						end
					end
					table.sort(sorted)
					local message = {}
					for _,i in pairs(sorted) do
						message[#message+1] = tostring(messageSet[i])
					end
					return table.concat(message,"; ")
				end;
			},{
				__index = messageSet;
				__newindex = function(self,k,v)
					messageSet[k] = v
					updateDisplay()
				end;
			})
	end

	function Status:Add(ref)
		-- if the reference exists, replace the old message with the new
		-- this doesn't change its position in the stack
		-- if it doesn't exist, add it to the stack
		if MessageLookup[ref] then
			MessageLookup[ref]:Destroy()
		else
			table.insert(MessageStack,ref)
		end
		MessageLookup[ref] = createMessage()
		updateDisplay()
		return MessageLookup[ref]
	end

	function Status:Remove(ref)
		local message = MessageLookup[k]
		if message ~= nil then
			for i = #MessageStack,1,-1 do
				if MessageStack[i] == k then
					table.remove(MessageStack,i)
					break
				end
			end
			MessageLookup[k] = nil
			message:Destroy()
			updateDisplay()
		end
	end

	setmetatable(Status,{__index = MessageLookup})
end
